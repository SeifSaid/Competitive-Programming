//CP Cheat Sheet

// Constants
const int MOD = 1e9 + 7; // Change MOD as needed
const int MAXN = 1e6;

// Binary Exponentiation
int power(int a, int b, int mod) {
    int result = 1;
    while (b > 0) {
        if (b % 2 == 1) result = (1LL * result * a) % mod;
        a = (1LL * a * a) % mod;
        b /= 2;
    }
    return result;
}

// Modular Arithmetic
ll mult(ll a, ll b, ll mod) {
    return (a % mod) * (b % mod) % mod;
}
ll sum(ll a, ll b, ll mod) {
    return (a % mod + b % mod) % mod;
}
ll sub(ll a, ll b, ll mod) {
    return (a % mod - b % mod + mod) % mod;
}
ll inv(ll a, ll mod) {
    return power(a, mod - 2, mod);
}

// Factorials and Combinatorics
vector<ll> fact(MAXN + 1), invfact(MAXN + 1);
void precompute_factorials() {
    fact[0] = fact[1] = 1;
    for (int i = 2; i <= MAXN; ++i)
        fact[i] = mult(fact[i - 1], i, MOD);
    invfact[MAXN] = inv(fact[MAXN], MOD);
    for (int i = MAXN - 1; i >= 0; --i)
        invfact[i] = mult(invfact[i + 1], i + 1, MOD);
}
ll C(int n, int r) {
    if (r > n || r < 0) return 0;
    return mult(fact[n], mult(invfact[r], invfact[n - r], MOD), MOD);
}

// GCD & LCM
int gcd(int a, int b) {
    while (b) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int lcm(int a, int b) {
    return (1LL * a / gcd(a, b) * b) % MOD;
}

// Sieve of Eratosthenes
vector<bool> is_prime;
vector<int> primes;
void SieveOfEratosthenes(int n) {
    is_prime.assign(n + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= n; ++p) {
        if (is_prime[p]) {
            for (int i = p * p; i <= n; i += p)
                is_prime[i] = false;
        }
    }
    for (int i = 2; i <= n; ++i)
        if (is_prime[i]) primes.push_back(i);
}

// Prime Factorization
vector<int> prime_factors(int n) {
    vector<int> factors;
    for (int p = 2; p * p <= n; ++p) {
        while (n % p == 0) {
            factors.push_back(p);
            n /= p;
        }
    }
    if (n > 1) factors.push_back(n);
    return factors;
}

// Binary Conversion
vector<int> to_binary(ll n) {
    vector<int> v;
    for (ll i = 1LL << 31; i > 0; i >>= 1) {
        v.push_back((n & i) != 0);
    }
    return v;
}



//Comparators
auto comp11= [](const auto &x, const auto &y) {
        return x.first < y.first;
    };
auto comp12= [](const auto &x, const auto &y) {
        return x.first > y.first;
    };
auto comp21= [](const auto &x, const auto &y) {
        return x.second < y.second;
    };
auto comp22= [](const auto &x, const auto &y) {
        return x.second > y.second;
    };

//sort(v.begin(), v.end(), greater<int>()); 
//bool is_sorted(iterator first, iterator last);
// bool is_sorted(iterator first, iterator last, comp);


//isprime
bool isprime(int n) {
    if (n <= 1) return false; 
    if (n <= 3) return true;  
    if (n % 2 == 0 || n % 3 == 0) return false; 
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) {
            return false;
        }
    }
    return true;
}

//String hashing

const int P = 31; // A prime number larger than the alphabet size (if n>> P=53)
const int MOD = 1e9 + 9;
vector<long long> p_pow;  // Powers of P
vector<long long> h;      // Hashes
void compute_hash(const string& s) {
    int n = s.size();
    p_pow.resize(n);
    h.resize(n + 1, 0);
    p_pow[0] = 1;
    for (int i = 1; i < n; ++i)
        p_pow[i] = (p_pow[i - 1] * P) % MOD;
    for (int i = 0; i < n; ++i)
        h[i + 1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % MOD;
}

// Hash of substring s[l:r]
long long substring_hash(int l, int r) {
    return (h[r + 1] + MOD - h[l] * p_pow[r - l + 1] % MOD) % MOD;
}

//Manacher's Algorithm (find the longest palindromic substring in linear time)
vector<int> manacher(string s) {
    string t = "#";
    for (char c : s) t += c + string("#");
    int n = t.size();
    vector<int> p(n, 0);
    int c = 0, r = 0;
    for (int i = 1; i < n - 1; ++i) {
        int mirror = 2 * c - i;
        if (i < r) p[i] = min(r - i, p[mirror]);
        while (t[i + (1 + p[i])] == t[i - (1 + p[i])]) p[i]++;
        if (i + p[i] > r) {
            c = i;
            r = i + p[i];
        }
    }
    return p;
}

getline(cin,s); //te5o string m3a les espaces

swap(v, new_v); //ti9leb 2 vectors

fill(v.begin(), v.end(), 0); //t3abi vector
memset(a, 0, sizeof(a));

s.rfind('A')-s.find('A')+1 //first and last occ

for (auto it = v.begin(); it != v.end(); ++it)
        cout << ' ' << *it;

diff.erase(diff.end()-1)
diff.erase(diff.begin())

v.insert(v.begin() + 3, 100); 
//insert 100 at position 3

v.insert(v.begin() + 3, 4, 100); 
//insert 100, 4 times at position 3

v.insert(v.begin() + 3, temp.begin() + 2, temp.begin() + 5); 
//insert elements 2->5 from temp in v at postion 3

auto it = mySet.find(3);
if (it != mySet.end()) mySet.erase(it);

str.erase(index_to_remove, num_chars_to_remove);

vec.erase(vec.begin() + index_to_remove);

//Kadane's Algorithm (Max sum of subarray)

long long mx = 0;
long long curr = 0;

for (long long num : a) {
    curr = num > curr + num ? num : curr + num;
    mx = mx > curr ? mx : curr ;
}

int lower_bound_index = lower_bound(v.begin(), v.end(), x) - v.begin();
int upper_bound_index = upper_bound(v.begin(), v.end(), x) - v.begin();

// when the number is too large. use powl instead of pow.
// will provide you more accuracy.
powl(a, b)
(int)round(p, (1.0/n)) // nth root of p

bool next_permutation(iterator first, iterator last);

bool prev_permutation(iterator first, iterator last)

// there are 25 prime numbers under 100
 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,
 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97

//Leap year
 bool isLeap(int n)
 {
 if (n%100==0)
 if (n%400==0) return true;
 else return false;
 if (n%4==0) return true;
 else return false;
 }

//Find rank k in array
 int find(int l, int r, int k)
 {
 int i=0,j=0,x=0,t=0;
 if (l==r) return a[l];
 x=a[(l+r)/2];
 t=a[x]; a[x]=a[r]; a[r]=t;
 i=l-1;
 for (int j=l; j<=r-1;j++)
 if (a[j]<=a[r])
 {
 i++;
 t=a[i]; a[i]=a[j]; a[j]=t;
 }
 i++;
 t=a[i]; a[i]=a[r]; a[r]=t;
 if (i==k) return a[i];
}
 if (i<k) return find(i+1, r,k);
 return find(l, i-1, k);


// A function to print all prime 
// factors of a given number n 
void primeFactors(int n) 
{ 
    // Print the number of 2s that divide n 
    while (n % 2 == 0) 
    { 
        cout << 2 << " "; 
        n = n/2; 
    } 
 
    // n must be odd at this point. So we can skip 
    // one element (Note i = i +2) 
    for (int i = 3; i <= sqrt(n); i = i + 2) 
    { 
        // While i divides n, print i and divide n 
        while (n % i == 0) 
        { 
            cout << i << " "; 
            n = n/i; 
        } 
    } 
 
    // This condition is to handle the case when n 
    // is a prime number greater than 2 
    if (n > 2) 
        cout << n << " "; 
} 

//count cycles between 2 permutations
int count_cycles(int n, const vector<int>& a, const vector<int>& b) {
    // Create a mapping from a[i] to b[i]
    unordered_map<int, int> mapping;
    for (int i = 0; i < n; ++i) {
        mapping[a[i]] = b[i];
    }

    unordered_set<int> visited; // To track visited nodes
    int cycle_count = 0;

    // Traverse all nodes
    for (int i = 0; i < n; ++i) {
        int start = a[i];
        if (visited.count(start) == 0) { // If not visited
            ++cycle_count; // Start a new cycle
            int current = start;
            // Traverse the cycle
            while (visited.count(current) == 0) {
                visited.insert(current);
                current = mapping[current];
            }
        }
    }

    return cycle_count;
}

//counting divisors
int count_divisors(int n) {
    int divisors = 1;
    // Check div by 2
    int count = 0;
    while (n % 2 == 0) {
        n /= 2;
        count++;
    }
    divisors *= (count + 1);
    // Check div by odds up to sqrt(n)
    for (int i = 3; i * i <= n; i += 2) {
        count = 0;
        while (n % i == 0) {
            n /= i;
            count++;
        }
        divisors *= (count + 1);
    }
    // If n is still greater than 1, then it's a prime factor
    if (n > 1) {
        divisors *= 2;
    }
    return divisors;
}
