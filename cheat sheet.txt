# CP Cheat Sheet

//Binary Exponentiation
int power(int a, int b, int mod) {
    int result = 1;
    while (b > 0) {
        if (b % 2 == 1) result = (result * a) % mod;
        a = (a * a) % mod;
        b /= 2;
    }
    return result;
}

//Inverse Modulo
//(a/b) % MOD == (a*power(b,MOD-2)) % MOD
int inv(int a, int mod) {
    return power(a, mod - 2, mod);
}

ll mult(ll a,ll b,ll n)
{
    return((a%n)*(b%n))%n;
}
ll sum(ll a,ll b,ll n)
{
    return((a%n)+(b%n))%n;
}
ll sub(ll a,ll b,ll n)
{
    return((a%n)-(b%n)+n)%n;
}
ll inv(ll a,ll n)
{
    return pow(a,n-2,n);
}
int xxxxx=2*1000000+1;
vector<ll> fact(xxxxx);
vector<ll> invfact(xxxxx);
void fac(ll n=mod)
{
    fact[0]=fact[1]=1;
    for (int i =2;i<xxxxx;i++)
        fact[i]=mult(fact[i-1],i,n);
}
void invfac(ll n=mod)
{
    invfact[xxxxx-1]=inv(fact[xxxxx-1],n);
    for (int i =xxxxx-2;i>=0;i--)
        invfact[i]=mult(invfact[i+1],i+1,n);
}
ll C(ll k,ll m,ll n=mod)
{
    if ((k>m)||(k<0))
        return 0;
    if (k==0)return 1;
    return mult(fact[m],mult(invfact[k],invfact[m-k],n),n);
}

//Factorial
const int MAXN = 1000000;
int fact[MAXN + 1];
void precompute_factorials() {
    fact[0] = 1;
    for (int i = 1; i <= MAXN; ++i) {
        fact[i] = fact[i - 1] * i % MOD;
    }
}
int nCr(int n, int r) {
    if (r > n) return 0;
    return fact[n] * inv(fact[r]) % MOD * inv(fact[n - r]) % MOD;
}


//Comparators
auto comp11= [](const auto &x, const auto &y) {
        return x.first < y.first;
    };
auto comp12= [](const auto &x, const auto &y) {
        return x.first > y.first;
    };
auto comp21= [](const auto &x, const auto &y) {
        return x.second < y.second;
    };
auto comp22= [](const auto &x, const auto &y) {
        return x.second > y.second;
    };
//sort(v.begin(), v.end(), greater<int>()); 

//GCD & LCM
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int lcm(int a, int b) {
    return (a / gcd(a, b)) * b;
}


//Sieve
ll n;
vector<bool>prime;
vector<int>primes;
void SieveOfEratosthenes(int n)
{
    prime.resize(n+1,true);
    prime[0]=prime[1]=false;
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
    for(int i=2;i<=n;i++)if(prime[i]) primes.push_back(i);
}

//Prime Factorization
vector<int> prime_factors(int n) {
    vector<int> factors;
    for (int i = 2; i * i <= n; ++i) {
        while (n % i == 0) {
            factors.push_back(i);
            n /= i;
        }
    }
    if (n > 1) factors.push_back(n);
    return factors;
}


//to_bin
auto bin(long long n,vector<int> &v)
{
    long long i;
    v.push_back(0);
    for (i = 1 << 30; i > 0; i = i / 2)
    {
        if((n & i) != 0)
        {
            v.push_back(1);
        }
        else
        {
            v.push_back(0);
        }
    }
    return v;
}


//String hashing

const int P = 31; // A prime number larger than the alphabet size (if n>> P=53)
const int MOD = 1e9 + 9;
vector<long long> p_pow;  // Powers of P
vector<long long> h;      // Hashes
void compute_hash(const string& s) {
    int n = s.size();
    p_pow.resize(n);
    h.resize(n + 1, 0);
    p_pow[0] = 1;
    for (int i = 1; i < n; ++i)
        p_pow[i] = (p_pow[i - 1] * P) % MOD;
    for (int i = 0; i < n; ++i)
        h[i + 1] = (h[i] + (s[i] - 'a' + 1) * p_pow[i]) % MOD;
}

// Hash of substring s[l:r]
long long substring_hash(int l, int r) {
    return (h[r + 1] + MOD - h[l] * p_pow[r - l + 1] % MOD) % MOD;
}

//Manacher's Algorithm (find the longest palindromic substring in linear time)
vector<int> manacher(string s) {
    string t = "#";
    for (char c : s) t += c + string("#");
    int n = t.size();
    vector<int> p(n, 0);
    int c = 0, r = 0;
    for (int i = 1; i < n - 1; ++i) {
        int mirror = 2 * c - i;
        if (i < r) p[i] = min(r - i, p[mirror]);
        while (t[i + (1 + p[i])] == t[i - (1 + p[i])]) p[i]++;
        if (i + p[i] > r) {
            c = i;
            r = i + p[i];
        }
    }
    return p;
}



getline(cin,s); //te5o string m3a les espaces
swap(v, new_v); //ti9leb 2 vectors
fill(v.begin(), v.end(), 0); //t3abi vector
s.rfind('A')-s.find('A')+1 //first and last occ

for (auto it = v.begin(); it != v.end(); ++it)
        cout << ' ' << *it;

diff.erase(diff.end()-1)
diff.erase(diff.begin())

v.insert(v.begin() + 3, 100); 
//insert 100 at position 3

v.insert(v.begin() + 3, 4, 100); 
//insert 100, 4 times at position 3

v.insert(v.begin() + 3, temp.begin() + 2, temp.begin() + 5); 
//insert elements 2->5 from temp in v at postion 3

auto it = mySet.find(3);
if (it != mySet.end()) mySet.erase(it);

str.erase(index_to_remove, num_chars_to_remove);

vec.erase(vec.begin() + index_to_remove);

//Kadane's Algorithm (Max sum of subarray)

long long mx = 0;
long long curr = 0;

for (long long num : a) {
    curr = num > curr + num ? num : curr + num;
    mx = mx > curr ? mx : curr ;
}

int lower_bound_index = lower_bound(v.begin(), v.end(), x) - v.begin();
int upper_bound_index = upper_bound(v.begin(), v.end(), x) - v.begin();


**Bismask**

//XOR
x ^ 0 = x
x ^ x = 0
a ^ b = c
a ^ c = b
b ^ c = a

//Nth bit of x
(x>>n)&1

//x POWER OF 2
x & (x-1) == 0 

//Count number of 1's
builtin_popcount(n)
builtin_popcountl(n) (long long)

//Set Nth bit to 1 
x |= (1<<n)